// <auto-generated />
using System;
using StreamingCourses_Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StreamingCourses_Domain.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240904060900_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("CourseTelegramGroup", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("CourseTelegramGroup");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStreaming")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.CourseCurator", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CuratorId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "CuratorId");

                    b.HasIndex("CuratorId");

                    b.ToTable("CourseCurators");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Curator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CuratorInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupType")
                        .HasColumnType("int");

                    b.Property<int?>("UserInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuratorInfoId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Curators");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.CuratorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Advantages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hobbies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkYouTube")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoscowTimeDifference")
                        .HasColumnType("int");

                    b.Property<string>("PullRequestsTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CuratorInfos");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CuratorId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CuratorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.TelegramChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TelegramMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TelegramMemberId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.TelegramGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("InviteLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.TelegramMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.UserDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("TelegramFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Workload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CuratorId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CuratorId");

                    b.ToTable("Workloads");
                });

            modelBuilder.Entity("TelegramGroupTelegramMember", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("TelegramGroupTelegramMember");
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingCourses_Domain.Entries.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTelegramGroup", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingCourses_Domain.Entries.TelegramGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Course", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.TelegramChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.CourseCurator", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingCourses_Domain.Entries.Curator", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Curator");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Curator", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.CuratorInfo", "CuratorInfo")
                        .WithMany()
                        .HasForeignKey("CuratorInfoId");

                    b.HasOne("StreamingCourses_Domain.Entries.UserDb", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");

                    b.Navigation("CuratorInfo");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Student", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.Curator", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId");

                    b.HasOne("StreamingCourses_Domain.Entries.TelegramGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("StreamingCourses_Domain.Entries.UserDb", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId");

                    b.Navigation("Curator");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.TelegramChannel", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.TelegramMember", null)
                        .WithMany("Channels")
                        .HasForeignKey("TelegramMemberId");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.UserDb", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Workload", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.Course", "Course")
                        .WithMany("Workload")
                        .HasForeignKey("CourseId");

                    b.HasOne("StreamingCourses_Domain.Entries.Curator", "Curator")
                        .WithMany("Workloads")
                        .HasForeignKey("CuratorId");

                    b.Navigation("Course");

                    b.Navigation("Curator");
                });

            modelBuilder.Entity("TelegramGroupTelegramMember", b =>
                {
                    b.HasOne("StreamingCourses_Domain.Entries.TelegramGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreamingCourses_Domain.Entries.TelegramMember", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Course", b =>
                {
                    b.Navigation("Workload");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.Curator", b =>
                {
                    b.Navigation("Workloads");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.TelegramMember", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("StreamingCourses_Domain.Entries.UserDb", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
